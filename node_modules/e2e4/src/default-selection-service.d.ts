import { SelectionService } from './contracts/selection-service';
/**
 * Internal contract for {@link DefaultSelectionService}.
 */
export interface SelectionTuple {
    /**
     * Index of selected element in {@link DefaultSelectionService.items} collection.
     */
    index: number;
    /**
     * Element from {@link DefaultSelectionService.items} collection.
     */
    item: any;
}
/**
 * Default implementation of {@link SelectionService}.
 */
export declare class DefaultSelectionService implements SelectionService {
    /**
     * @inheritdoc
     */
    lastProcessedIndex: number;
    /**
     * @inheritdoc
     */
    trackByFn: (index: number, item: any) => any;
    /**
     * @inheritdoc
     */
    items: any[];
    /**
     * Collection of {@link SelectionTuple} elements which represents currently selected items in {@link items} collection.
     */
    protected selectionsList: SelectionTuple[];
    constructor();
    /**
     * @inheritdoc
     */
    destroy(): void;
    /**
     * @inheritdoc
     */
    checkSelection(): void;
    /**
     * Checks that applied index is valid number and it's value is inside {@link items} boundaries.
     * @param index index to check.
     * @returns `true` if index is valid.
     */
    isIndexAcceptable(index: number): boolean;
    /**
     * @inheritdoc
     */
    deselectAll(): void;
    /**
     * @inheritdoc
     */
    selectAll(): void;
    /**
     * @inheritdoc
     */
    selectRange(fromIndex: number, toIndex: number): void;
    /**
     * @inheritdoc
     */
    hasSelections(): boolean;
    /**
     * @inheritdoc
     */
    isRangeSelected(from: number, to: number): boolean;
    /**
     * @inheritdoc
     */
    isIndexSelected(index: number): boolean;
    /**
     * @inheritdoc
     */
    getItemIndex(item: any): number;
    /**
     * @inheritdoc
     */
    getMinSelectedIndex(): number;
    /**
     * @inheritdoc
     */
    getMaxSelectedIndex(): number;
    /**
     * @inheritdoc
     */
    selectFirst(): void;
    /**
     * @inheritdoc
     */
    selectLast(): void;
    /**
     * @inheritdoc
     */
    selectIndex(index: number, savePrevious?: boolean): void;
    /**
     * @inheritdoc
     */
    deselectIndex(index: number): void;
    /**
     * @inheritdoc
     */
    toggleSelection(index: number, savePrevious?: boolean): void;
    /**
     * @inheritdoc
     */
    getSelectedElements(): object[];
    /**
     * @inheritdoc
     */
    getSelectedIndexes(): number[];
    /**
     * Default tracking function that will be used if nothing was specified for {@link trackByFn}.
     * Implements comparison by reference equality of objects.
     */
    protected trackByIdentity: (index: number, item: any) => any;
    /**
     * Performs final processing of selection/deselection of element.
     *
     * Current implementation sets {@link selected} propery of element (if it's defined).
     */
    protected processSelection(tuple: SelectionTuple, selected: boolean): void;
    /**
     * Internal method that used to perform item selection.
     */
    protected deselectItem(selectionTuple: SelectionTuple): void;
    /**
     * Internal method that used to execute item deselection.
     */
    protected selectItem(selectionTuple: SelectionTuple, savePrevious?: boolean): void;
    /**
     * Internal method that used to represent selection item as {@link SelectionTuple}.
     */
    protected getSelectionTuple(index: number): SelectionTuple;
}
