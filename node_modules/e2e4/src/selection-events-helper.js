"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Used by {@link SelectionEventsHelper} to determine which key was pressed on keyboard.
 */
var KeyCodes;
(function (KeyCodes) {
    KeyCodes[KeyCodes["Tab"] = 9] = "Tab";
    KeyCodes[KeyCodes["Enter"] = 13] = "Enter";
    KeyCodes[KeyCodes["Shift"] = 16] = "Shift";
    KeyCodes[KeyCodes["Ctrl"] = 17] = "Ctrl";
    KeyCodes[KeyCodes["Alt"] = 18] = "Alt";
    KeyCodes[KeyCodes["Esc"] = 27] = "Esc";
    KeyCodes[KeyCodes["ArrowLeft"] = 37] = "ArrowLeft";
    KeyCodes[KeyCodes["ArrowUp"] = 38] = "ArrowUp";
    KeyCodes[KeyCodes["ArrowRight"] = 39] = "ArrowRight";
    KeyCodes[KeyCodes["ArrowDown"] = 40] = "ArrowDown";
    KeyCodes[KeyCodes["A"] = 65] = "A";
})(KeyCodes = exports.KeyCodes || (exports.KeyCodes = {}));
/**
 * Used by {@link SelectionEventsHelper} to determine which mouse button is pressed.
 */
var MouseButtons;
(function (MouseButtons) {
    MouseButtons[MouseButtons["None"] = 0] = "None";
    MouseButtons[MouseButtons["Left"] = 1] = "Left";
    MouseButtons[MouseButtons["Middle"] = 2] = "Middle";
    MouseButtons[MouseButtons["Right"] = 3] = "Right";
})(MouseButtons = exports.MouseButtons || (exports.MouseButtons = {}));
/**
 * Helper class that can be used by application-defined UI components for handling keyboard and mouse interaction with component.
 *
 * Implements selection model that is similar to Excel or Google Sheets. Concrete handled patterns you can see in concrete methods documentation.
 *
 * This implementation doesn't use any browser specific objects such as events and doesn't use any browser API.
 */
var SelectionEventsHelper = /** @class */ (function () {
    /**
     * @param selectionConfig Used for declarative interaction with application-defined UI component and access to it's selection settings
     * as well as {@link SelectionService} implementation, that was configured on it.
     */
    function SelectionEventsHelper(selectionService) {
        this.selectionService = selectionService;
    }
    /**
     * Common handler for keyboard events. Depending on specified parameters calls {@link onNextKey}, {@link onPreviousKey}, {@link trySelectPreviousItem}, {@link trySelectNextItem} or {@link trySelectAll} handler.
     * @param ctrlKeyPressed - `true` if `Ctrl` key was pressed.
     * @param shiftKeyPressed - `true` if `Shift` key was pressed.
     * @param keyCode - specifies code of key that was pressed. This method can handle next keys: {@link KeyCodes.ArrowUp}, {@link KeyCodes.ArrowLeft}, {@link KeyCodes.ArrowDown}, {@link KeyCodes.ArrowRight},
     * {@link KeyCodes.Tab} and {@link KeyCodes.A}.
     * @returns `true` if any of executed commands was applied.
     */
    // tslint:disable-next-line:cyclomatic-complexity
    SelectionEventsHelper.prototype.keyboardHandler = function (ctrlKeyPressed, shiftKeyPressed, keyCode) {
        switch (keyCode) {
            case KeyCodes.ArrowUp:
                return !this.horizontal && this.onPreviousKey(ctrlKeyPressed, shiftKeyPressed);
            case KeyCodes.ArrowLeft:
                return this.horizontal && this.onPreviousKey(ctrlKeyPressed, shiftKeyPressed);
            case KeyCodes.ArrowDown:
                return !this.horizontal && this.onNextKey(ctrlKeyPressed, shiftKeyPressed);
            case KeyCodes.ArrowRight:
                return this.horizontal && this.onNextKey(ctrlKeyPressed, shiftKeyPressed);
            case KeyCodes.Tab:
                return ctrlKeyPressed
                    ? false
                    : shiftKeyPressed ? this.trySelectPreviousItem(false) : this.trySelectNextItem(false);
            case KeyCodes.A:
                return this.trySelectAll(ctrlKeyPressed, shiftKeyPressed);
            default:
                return false;
        }
    };
    /**
     * Common handler for mouse events.
     * @param ctrlKeyPressed - `true` if `Ctrl` key was pressed.
     * @param shiftKeyPressed - `true` if `Shift` key was pressed.
     * @param mouseButton specifies which mouse button was pressed.
     * @param itemIndex index of clicked element in {@link SelectionService.items} collection.
     * @returns `true` if any of executed commands was applied.
     */
    SelectionEventsHelper.prototype.mouseHandler = function (ctrlKeyPressed, shiftKeyPressed, mouseButton, itemIndex) {
        var isItemSelected = this.selectionService.isIndexSelected(itemIndex);
        if (isItemSelected !== false && mouseButton !== MouseButtons.Left) {
            return false;
        }
        if (shiftKeyPressed && this.multiple) {
            var minIndex = this.selectionService.getMinSelectedIndex();
            this.selectionService.selectRange(minIndex === -1 ? itemIndex : minIndex, itemIndex);
        }
        else {
            var multiple = (ctrlKeyPressed || this.toggleOnly) && this.multiple;
            this.selectionService.toggleSelection(itemIndex, multiple);
        }
        return true;
    };
    /**
     * Tries to select all items if `Ctrl+A` combination was pressed.
     * @param ctrlKeyPressed - `true` if `Ctrl` key was pressed.
     * @param shiftKeyPressed - `true` if `Shift` key was pressed (with pressed `Shift` this command would not be applied).
     * @returns `true` if command was applied.
     */
    SelectionEventsHelper.prototype.trySelectAll = function (ctrlPressed, shiftPressed) {
        if (ctrlPressed && !shiftPressed && this.multiple) {
            this.selectionService.selectAll();
            return true;
        }
        return false;
    };
    /**
     * Tries to select previous item when `Arrow Up` was pressed (`Arrow Left` if {@link SelectionAreaConfig.horizontal} is `true`).
     *
     * If `Shift` was pressed and {@link SelectionAreaConfig.multiple} is 'true' then elements selected before stays selected.
     * @param shiftKeyPressed - `true` if `Shift` key was pressed.
     * @returns `true` if command was applied.
     */
    SelectionEventsHelper.prototype.trySelectPreviousItem = function (shiftKeyPressed) {
        if (this.selectionService.lastProcessedIndex > 0) {
            this.selectionService.selectIndex(this.selectionService.lastProcessedIndex - 1, shiftKeyPressed && this.multiple);
            return true;
        }
        return false;
    };
    /**
     * Tries to select next item when `Arrow Down` was pressed (`Right Arrow` if {@link SelectionAreaConfig.horizontal} is `true`).
     *
     * If `Shift` was pressed and {@link SelectionAreaConfig.multiple} is 'true' then elements selected before stays selected.
     * @param shiftKeyPressed - `true` if `Shift` key was pressed.
     * @returns `true` if command was applied.
     */
    SelectionEventsHelper.prototype.trySelectNextItem = function (shiftKeyPressed) {
        if (this.selectionService.lastProcessedIndex < this.selectionService.items.length - 1) {
            this.selectionService.selectIndex(this.selectionService.lastProcessedIndex + 1, shiftKeyPressed && this.multiple);
            return true;
        }
        return false;
    };
    /**
     * Tries to deselect last selected element when `Shift+Arrow Up` combination pressed (`Shift+Arrow Left` if {@link SelectionAreaConfig.horizontal} is `true`).
     * @param shiftKeyPressed - `true` if `Shift` key was pressed.
     * @returns `true` if command was applied.
     */
    SelectionEventsHelper.prototype.tryDeselectLastItemInRange = function (shiftKeyPressed) {
        if (this.selectionService.lastProcessedIndex > 0 && shiftKeyPressed) {
            if (this.selectionService.isIndexSelected(this.selectionService.lastProcessedIndex - 1)) {
                this.selectionService.deselectIndex(this.selectionService.lastProcessedIndex);
                this.selectionService.lastProcessedIndex = this.selectionService.lastProcessedIndex - 1;
                return true;
            }
        }
        return false;
    };
    /**
     * Tries to deselect last selected element when `Shift+Arrow Down` combination pressed (`Shift+Arrow Right` if {@link SelectionAreaConfig.horizontal} is `true`).
     * @param shiftKeyPressed - `true` if `Shift` key was pressed.
     * @returns `true` if command was applied.
     */
    SelectionEventsHelper.prototype.tryDeselectLastItemInReversedRange = function (shiftKeyPressed) {
        if (this.selectionService.lastProcessedIndex < this.selectionService.items.length && shiftKeyPressed) {
            if (this.selectionService.isIndexSelected(this.selectionService.lastProcessedIndex + 1)) {
                this.selectionService.deselectIndex(this.selectionService.lastProcessedIndex);
                this.selectionService.lastProcessedIndex = this.selectionService.lastProcessedIndex + 1;
                return true;
            }
        }
        return false;
    };
    /**
     * Tries to select element that is previous to the last processed element and last processed element was deselected.
     * @param ctrlKeyPressed - `true` if `Ctrl` key was pressed.
     * @param shiftKeyPressed - `true` if `Shift` key was pressed.
     * @returns `true` if command was applied.
     */
    SelectionEventsHelper.prototype.tryBuildRangeWithPreviousItemWhenLastItemWasDeselected = function (ctrlKeyPressed, shiftKeyPressed) {
        if (!ctrlKeyPressed &&
            shiftKeyPressed &&
            false === this.selectionService.isIndexSelected(this.selectionService.lastProcessedIndex)) {
            this.selectionService.selectRange(this.selectionService.lastProcessedIndex, this.selectionService.lastProcessedIndex - 1);
            return true;
        }
        return false;
    };
    /**
     * Tries to select element that is next to the last processed element and last processed element was deselected.
     * @param ctrlKeyPressed - `true` if `Ctrl` key was pressed.
     * @param shiftKeyPressed - `true` if `Shift` key was pressed.
     * @returns `true` if command was applied.
     */
    SelectionEventsHelper.prototype.tryBuildRangeWithNextItemWhenLastItemWasDeselected = function (ctrlKeyPressed, shiftKeyPressed) {
        if (!ctrlKeyPressed &&
            shiftKeyPressed &&
            false === this.selectionService.isIndexSelected(this.selectionService.lastProcessedIndex)) {
            this.selectionService.selectRange(this.selectionService.lastProcessedIndex, this.selectionService.lastProcessedIndex + 1);
            return true;
        }
        return false;
    };
    /**
     * Selects first element in {@link SelectionService.items} if nothing was selected before.
     * @returns `true` if command was applied.
     */
    SelectionEventsHelper.prototype.tryInitialSelectionOfFirstItem = function () {
        if (this.selectionService.lastProcessedIndex === null) {
            this.selectionService.selectFirst();
            return true;
        }
        return false;
    };
    /**
     * Tries to select all elements starting from last selected element up to first element in {@link SelectionService.items} when `Ctrl+Shift+Arrow Up` combination was pressed
     * (`Ctrl+Shift+Arrow Left` if {@link SelectionAreaConfig.horizontal} is `true`).
     * @param ctrlKeyPressed - `true` if `Ctrl` key was pressed.
     * @param shiftKeyPressed - `true` if `Shift` key was pressed.
     * @returns `true` if command was applied.
     */
    SelectionEventsHelper.prototype.trySelectAllItemsUpToFirst = function (ctrlKeyPressed, shiftKeyPressed) {
        if (this.selectionService.lastProcessedIndex !== null && ctrlKeyPressed && shiftKeyPressed && this.multiple) {
            this.selectionService.selectRange(this.selectionService.lastProcessedIndex, 0);
            return true;
        }
        return false;
    };
    /**
     * Tries to select all elements starting from last selected element up to last element in {@link SelectionService.items} when `Ctrl+Shift+Arrow Down` combination was pressed
     * (`Ctrl+Shift+Arrow Right` if {@link SelectionAreaConfig.horizontal} is `true`).
     * @param ctrlKeyPressed - `true` if `Ctrl` key was pressed.
     * @param shiftKeyPressed - `true` if `Shift` key was pressed.
     * @returns `true` if command was applied.
     */
    SelectionEventsHelper.prototype.trySelectAllItemsUpToLast = function (ctrlKeyPressed, shiftKeyPressed) {
        if (this.selectionService.lastProcessedIndex !== null && ctrlKeyPressed && shiftKeyPressed && this.multiple) {
            this.selectionService.selectRange(this.selectionService.lastProcessedIndex, this.selectionService.items.length - 1);
            return true;
        }
        return false;
    };
    /**
     * Tries to select first element in {@link SelectionService.items} when `Ctrl+Arrow Up` combination was pressed (`Ctrl+Arrow Left` if {@link SelectionAreaConfig.horizontal} is `true`).
     * @param ctrlKeyPressed - `true` if `Ctrl` key was pressed.
     * @param shiftKeyPressed - `true` if `Shift` key was pressed (with pressed `Shift` this command would not be applied).
     * @returns `true` if command was applied.
     */
    SelectionEventsHelper.prototype.trySelectFirstItem = function (ctrlKeyPressed, shiftKeyPressed) {
        if (ctrlKeyPressed && !shiftKeyPressed) {
            this.selectionService.selectFirst();
            return true;
        }
        return false;
    };
    /**
     * Tries to select last element in {@link SelectionService.items} when `Ctrl+Arrow Down` combination was pressed (`Ctrl+Arrow Right` if {@link SelectionAreaConfig.horizontal} is `true`).
     * @param ctrlKeyPressed - `true` if `Ctrl` key was pressed.
     * @param shiftKeyPressed - `true` if `Shift` key was pressed (with pressed `Shift` this command would not be applied).
     * @returns `true` if command was applied.
     */
    SelectionEventsHelper.prototype.trySelectLastItem = function (ctrlKeyPressed, shiftKeyPressed) {
        if (ctrlKeyPressed && !shiftKeyPressed) {
            this.selectionService.selectLast();
            return true;
        }
        return false;
    };
    /**
     * Common handler for `Arrow Up` key (`Arrow Left` if {@link SelectionAreaConfig.horizontal} is `true`). Calls applicable handlers one by one until any returns `true`.
     * @param ctrlKeyPressed - `true` if `Ctrl` key was pressed.
     * @param shiftKeyPressed - `true` if `Shift` key was pressed.
     * @returns `true` if any of executed commands was applied.
     */
    SelectionEventsHelper.prototype.onPreviousKey = function (ctrlKeyPressed, shiftKeyPressed) {
        return (this.tryInitialSelectionOfFirstItem() ||
            this.trySelectFirstItem(ctrlKeyPressed, shiftKeyPressed) ||
            this.trySelectAllItemsUpToFirst(ctrlKeyPressed, shiftKeyPressed) ||
            this.tryBuildRangeWithPreviousItemWhenLastItemWasDeselected(ctrlKeyPressed, shiftKeyPressed) ||
            this.tryDeselectLastItemInRange(shiftKeyPressed) ||
            this.trySelectPreviousItem(shiftKeyPressed));
    };
    /**
     * Common handler for `Arrow Down` key (`Arrow Right` if {@link SelectionAreaConfig.horizontal} is `true`). Calls applicable handlers one by one until any returns `true`.
     * @param ctrlKeyPressed - `true` if `Ctrl` key was pressed.
     * @param shiftKeyPressed - `true` if `Shift` key was pressed.
     * @returns `true` if any of executed commands was applied.
     */
    SelectionEventsHelper.prototype.onNextKey = function (ctrlKeyPressed, shiftKeyPressed) {
        return (this.tryInitialSelectionOfFirstItem() ||
            this.trySelectLastItem(ctrlKeyPressed, shiftKeyPressed) ||
            this.trySelectAllItemsUpToLast(ctrlKeyPressed, shiftKeyPressed) ||
            this.tryBuildRangeWithNextItemWhenLastItemWasDeselected(ctrlKeyPressed, shiftKeyPressed) ||
            this.tryDeselectLastItemInReversedRange(shiftKeyPressed) ||
            this.trySelectNextItem(shiftKeyPressed));
    };
    return SelectionEventsHelper;
}());
exports.SelectionEventsHelper = SelectionEventsHelper;
//# sourceMappingURL=selection-events-helper.js.map