"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var filters_service_1 = require("./filters-service");
var utilities_1 = require("./utilities");
/**
 * Object literal used by {@link getDefaultFilterConfig} function to build filter configuration.
 * This object can be used to change default values of filter configs globally.
 * By default it has next values:
 * ```Javascript
 * {
 *        coerce: true,
 *        defaultValue: undefined,
 *        emptyIsNull: false,
 *        ignoreOnAutoMap: false,
 *        omitIfNullOrUndefined: false,
 *        parameterName: <value of 'propertyName' parameter>,
 *        parseFormatter: undefined,
 *        propertyName: <value of 'propertyName' parameter>,
 *        serializeFormatter: undefined
 * }
 * ```
 */
exports.DefaultFilterConfig = {
    coerce: true,
    defaultValue: undefined,
    emptyIsNull: false,
    ignoreOnAutoMap: false,
    omitIfNullOrUndefined: false,
    parseFormatter: undefined,
    serializeFormatter: undefined
};
/**
 * Returns filter configuration based on {@link DefaultFilterConfig} values with applied `parameterName` and `propertyName` properties values.
 * @param propertyName name of the property in `target type`, for which configuration is created. This value will be used to set {@link FilterConfig.propertyName} and {@link FilterConfig.parameterName} values.
 * @see {@link FilterConfig}
 */
function getDefaultFilterConfig(propertyName) {
    return __assign({ parameterName: propertyName, propertyName: propertyName }, utilities_1.cloneAsLiteral(exports.DefaultFilterConfig));
}
exports.getDefaultFilterConfig = getDefaultFilterConfig;
/**
 * Annotation that can be used to configure type property as filter to use with {@link FiltersService}
 * @param targetOrNameOrConfig
 *  - if annotation is applied without any parameters then result of {@link getDefaultFilterConfig} function will be used. Value of {@link FilterConfig.parameterName} property will be equal to annotated property name.
 *  - if annotation is applied with string parameter then result of {@link getDefaultFilterConfig} function will be used. Value of {@link FilterConfig.parameterName} property will be equal to applied parameter value.
 *  - if annotation is applied with object as parameter then result of {@link getDefaultFilterConfig} will be used and  all properties which were specified in passed object would be applied to resulting configuration via Object.assign.
 * @param key specified by TypeScript automatically.
 * @see {@link FilterConfig}
 */
function filter(targetOrNameOrConfig, key) {
    var decorateWithConfig = function (target, key2) {
        var config = getDefaultFilterConfig(key2);
        if (typeof targetOrNameOrConfig === 'string') {
            config.parameterName = targetOrNameOrConfig;
        }
        else {
            Object.assign(config, targetOrNameOrConfig);
        }
        filters_service_1.FiltersService.registerFilterConfig(target.constructor, config);
    };
    if (key) {
        var targetTemp = targetOrNameOrConfig;
        // tslint:disable-next-line:no-parameter-reassignment
        targetOrNameOrConfig = null;
        decorateWithConfig(targetTemp, key);
        return;
    }
    return decorateWithConfig;
}
exports.filter = filter;
//# sourceMappingURL=filter-annotation.js.map