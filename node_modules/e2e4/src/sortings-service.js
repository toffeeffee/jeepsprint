"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var sort_parameter_1 = require("./contracts/sort-parameter");
var filter_annotation_1 = require("./filter-annotation");
/**
 * Provides sorting functionality.
 * @note This type is configured to use with {@link FiltersService}.
 */
var SortingsService = /** @class */ (function () {
    function SortingsService() {
        /**
         * Sortings that were selected by the user and must be applied on next request of data.
         *
         * @note This property is ready to use with {@link FiltersService} since it has {@link filter} annotation.
         */
        this.sortings = new Array();
        /**
         * Internal implementation of {@link defaultSortings}.
         */
        this.defaultSortingsInternal = new Array();
    }
    Object.defineProperty(SortingsService.prototype, "defaultSortings", {
        /**
         * Default sortings that will be used by service.
         */
        get: function () {
            return this.defaultSortingsInternal;
        },
        /**
         * If called when {@link sortings} is empty then applied value will be copied to {@link sortings} immediately.
         */
        set: function (value) {
            this.defaultSortingsInternal = value || [];
            if (this.sortings.length === 0) {
                this.sortings = this.cloneDefaultSortings();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets {@link sortings} according to specified parameters.
     * @param fieldName name of the field by which sorting must be executed on server. This value will be used as {@link SortParameter.fieldName}.
     *
     * In case when sorting with the same field name is already specified, direction of this sorting will be toggled to reversed value and this sorting will be pushed to the end of {@link sortings} array.
     * So it will be applied last.
     * @param savePrevious `true` to keep previously applied sortings in {@link sortings} array.
     */
    SortingsService.prototype.setSort = function (fieldName, savePrevious) {
        var newSort = { direction: sort_parameter_1.SortDirection.Asc, fieldName: fieldName };
        for (var i = 0; i < this.sortings.length; i++) {
            if (this.sortings[i].fieldName === fieldName) {
                var existedSort = this.sortings.splice(i, 1)[0];
                newSort = {
                    direction: existedSort.direction,
                    fieldName: existedSort.fieldName
                };
                newSort.direction = newSort.direction === sort_parameter_1.SortDirection.Asc ? sort_parameter_1.SortDirection.Desc : sort_parameter_1.SortDirection.Asc;
                break;
            }
        }
        if (savePrevious) {
            this.sortings.push(newSort);
        }
        else {
            this.sortings.length = 0;
            this.sortings.push(newSort);
        }
    };
    /**
     * Removes sort with specified field name  from {@link sortings} array.
     * @param fieldName name of the sort to remove.
     */
    SortingsService.prototype.removeSort = function (fieldName) {
        for (var i = 0; i < this.sortings.length; i++) {
            if (this.sortings[i].fieldName === fieldName) {
                this.sortings.splice(i, 1);
            }
        }
    };
    /**
     * Removes all sortings from {@link sortings} array.
     */
    SortingsService.prototype.removeAllSortings = function () {
        this.sortings.length = 0;
    };
    /**
     * Performs service destroy.
     */
    SortingsService.prototype.destroy = function () {
        this.defaultSortingsInternal.length = 0;
        this.sortings.length = 0;
    };
    /**
     * Internal method for default sortings cloning.
     * This method is used as {@link FilterConfig.defaultValue} as well as for copying to {@link sortings} when {@link defaultSortings} setter is used and {@link sortings} is empty.
     */
    SortingsService.prototype.cloneDefaultSortings = function () {
        return this.defaultSortingsInternal.map(function (s) { return ({
            direction: s.direction,
            fieldName: s.fieldName
        }); });
    };
    __decorate([
        filter_annotation_1.filter({
            defaultValue: function () {
                return this.cloneDefaultSortings();
            },
            parameterName: 'sortings',
            parseFormatter: function (rawValue) {
                return Array.isArray(rawValue)
                    ? rawValue.map(function (sort) { return ({
                        direction: sort.direction * 1,
                        fieldName: sort.fieldName
                    }); })
                    : [];
            },
            serializeFormatter: function () {
                return this.sortings.map(function (sort) { return ({
                    direction: sort.direction,
                    fieldName: sort.fieldName
                }); });
            }
        }),
        __metadata("design:type", Array)
    ], SortingsService.prototype, "sortings", void 0);
    return SortingsService;
}());
exports.SortingsService = SortingsService;
//# sourceMappingURL=sortings-service.js.map