"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Copies values of all properties from passed object to the new object literal.
 *
 * If any of the properties of passed object is also a complex object then {@link cloneAsLiteral} will be called recursively.
 *
 * Function declarations are ignored.
 * @param value value to clone.
 * @returns resulted literal.
 */
function cloneAsLiteral(value) {
    if (value === null) {
        return null;
    }
    if (typeof value === 'undefined') {
        return undefined;
    }
    if (Array.isArray(value)) {
        return value.map(cloneAsLiteral);
    }
    if (typeof value === 'object') {
        var result = {};
        for (var index in value) {
            if (value.hasOwnProperty(index) && typeof value[index] !== 'function') {
                result[index] = cloneAsLiteral(value[index]);
            }
        }
        return result;
    }
    return value;
}
exports.cloneAsLiteral = cloneAsLiteral;
/**
 * Set of key-value pairs which is used by {@link coerceValue} method to coerce specific values.
 */
// tslint:disable-next-line: object-literal-key-quotes
exports.coerceTypes = { true: !0, false: !1, null: null };
/**
 * Coerce type of passed value.
 *
 * For example if you pass string with value 'null' it returns `null`, if you pass 'true' it returns boolean value `true`, if you pass '1.0' it returns number `1.0` etc.
 *
 * If passed value is complex object or array this method will be called for each property or array item.
 * @param value value to coerce.
 * @returns resulted value.
 * @see {@link coerceTypes}
 */
function coerceValue(value) {
    var result = value;
    if (result === null) {
        return null;
    }
    if (typeof result === 'undefined') {
        return undefined;
    }
    if (typeof result === 'object' || Array.isArray(result)) {
        for (var index in result) {
            if (result.hasOwnProperty(index)) {
                result[index] = coerceValue(result[index]);
            }
        }
    }
    else if (result && !isNaN(result)) {
        result = +result;
    }
    else if (result === 'undefined') {
        result = undefined;
    }
    else if (typeof exports.coerceTypes[result] !== 'undefined') {
        result = exports.coerceTypes[result];
    }
    return result;
}
exports.coerceValue = coerceValue;
/**
 * Cleaning up passed array by calling `splice` function.
 *
 * Next, each element of passed array will be checked for existence of `destroy` method and if it exists it will be called.
 * @param collection array of elements to destroy.
 * @param async if `true` then iterating over array and `destroy` methods calling will be executed via setTimeout (,0).
 */
function destroyAll(collection, async) {
    if (async === void 0) { async = true; }
    if (!Array.isArray(collection)) {
        return;
    }
    var items = collection.splice(0, collection.length);
    if (async) {
        setTimeout(function () {
            items.forEach(function (item) {
                if (item && item.destroy) {
                    item.destroy();
                }
            });
            items = null;
        }, 0);
    }
    else {
        items.forEach(function (item) {
            if (item && item.destroy) {
                item.destroy();
            }
        });
    }
}
exports.destroyAll = destroyAll;
//# sourceMappingURL=utilities.js.map